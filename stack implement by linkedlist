public class LinkedListStack {
    private Node top;

    private class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
        }
    }

    public LinkedListStack() {
        top = null; // Initialize top to null indicating an empty stack
    }

    public void push(int value) {
        Node newNode = new Node(value);
        newNode.next = top;                                // Make the new node point to the current top
        top = newNode; // Update top to the new node
        System.out.println("Pushed element: " + value);
    }

    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot pop element.");
            return -1;
        }

        int poppedElement = top.data;                    // Retrieve the data from the top node
        top = top.next; // Move top to the next node
        System.out.println("Popped element: " + poppedElement);
        return poppedElement;
    }

    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot peek element.");
            return -1;
        }

        return top.data;                     // Return the data from the top node without removing it
    }

    public boolean isEmpty() {
        return (top == null); // Return true if stack is empty
    }

    public static void main(String[] args) {
        LinkedListStack stack = new LinkedListStack();
        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.pop();
        stack.pop();
        stack.pop();
        stack.pop();
        stack.peek();
    }
}
